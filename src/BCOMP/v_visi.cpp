/******************************* CLEARSY **************************************
* Fichier : $Id: v_visi.cpp,v 2.0 2002-07-12 12:56:10 cm Exp $
* (C) 2008 CLEARSY
*
* Description :		Compilateur B
*					Tables de visibilite
*
This file is part of B_COMPILER
    Copyright (C) 2008 ClearSy (contact@clearsy.com)

    B_COMPILER is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; GNU General Public License version 3
    of the License

    B_COMPILER is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with B_COMPILER; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
******************************************************************************/
#include "c_port.h"
RCS_ID("$Id: v_visi.cpp,v 1.20 2002-07-12 12:56:10 cm Exp $") ;

/* Includes systeme */
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>

/* Includes Composant Local */
#include "c_api.h"
#include "v_toplvl.h"

//
//	} Tables de visibilite
//

// Table de visibilite
static T_access_authorisation visi_tbl_sot[(size_t)OTHER_ACCESS]
[(size_t)LOC_SPEC_USED+1]
[(size_t)FROM_LOCAL_OPERATION+1] ;

// Noms des enumeres
static const char *const access_entity_type_name_sct[] =
{
  /* 00 */
  "ACCESS_FORMAL_PARAMETER",
  /* 01 */
  "ACCESS_ABSTRACT_SET",
  /* 02 */
  "ACCESS_ENUMERATED_SET",
  /* 03 */
  "ACCESS_ENUMERATED_VALUE",
  /* 04 */
  "ACCESS_CONCRETE_CONSTANT",
  /* 05 */
  "ACCESS_ABSTRACT_CONSTANT",
  /* 06 */
  "ACCESS_CONCRETE_VARIABLE",
  /* 07 */
  "ACCESS_ABSTRACT_VARIABLE",
  /* 08 */
  "ACCESS_UNREFD_ABSTRACT_CONSTANT_FROM_ABS",
  /* 09 */
  "ACCESS_UNREFD_ABSTRACT_VARIABLE_FROM_ABS",
  /* 10 */
  "ACCESS_OPERATION",
  /* 11 */
  "ACCESS_LOCAL_OPERATION",
  /* 12 */
  "ACCESS_IN_PARAMETER",
  /* 13 */
  "ACCESS_ANY_QUANTIFIER",
  /* 14 */
  "OTHER ACCESS",
} ;

static const char *const access_entity_location_name_sct[] =
{
  /* 00 */
  "LOC_SAME_SPECIFICATION",
  /* 01 */
  "LOC_SAME_REFINEMENT",
  /* 02 */
  "LOC_SAME_IMPLEMENTATION",
  /* 03 */
  "LOC_REFINEMENT_ABSTRACTION",
  /* 04 */
  "LOC_IMPLEMENTATION_ABSTRACTION",
  /* 05 */
  "LOC_SPEC_SEEN_BY_SPEC_OR_REF",
  /* 06 */
  "LOC_SPEC_SEEN_BY_IMPLEMENTATION",
  /* 07 */
  "LOC_SPEC_INCLUDED",
  /* 08 */
  "LOC_SPEC_IMPORTED",
  /* 09 */
  "LOC_SPEC_USED"
} ;

static const char *const latex_access_entity_location_name_sct[] =
{
  /* 00 */
  "LOC\\_SAME\\_SPECIFICATION",
  /* 01 */
  "LOC\\_SAME\\_REFINEMENT",
  /* 02 */
  "LOC\\_SAME\\_IMPLEMENTATION",
  /* 03 */
  "LOC\\_REFINEMENT\\_ABSTRACTION",
  /* 04 */
  "LOC\\_IMPLEMENTATION\\_ABSTRACTION",
  /* 05 */
  "LOC\\_SPEC\\_SEEN\\_BY\\_SPEC\\_OR\\_REF",
  /* 06 */
  "LOC\\_SPEC\\_SEEN\\_BY\\_IMPLEMENTATION",
  /* 07 */
  "LOC\\_SPEC\\_INCLUDED",
  /* 08 */
  "LOC\\_SPEC\\_IMPORTED",
  /* 09 */
  "LOC\\_SPEC\\_USED"
} ;

static const char *const access_from_context_name_sct[] =
{
  /* 00 */
  "FROM_CONSTRAINTS",
  /* 01 */
  "FROM_INCL_OR_EXT_OR_IMP",
  /* 02 */
  "FROM_PROPERTIES",
  /* 03 */
  "FROM_VALUES",
  /* 04 */
  "FROM_VALUES_AFTER_VALUATION",
  /* 05 */
  "FROM_INVARIANT_OR_ASSERTIONS",
  /* 06 */
  "FROM_ASSERT_PREDICATE",
  /* 07 */
  "FROM_VARIANT_OR_INVARIANT",
  /* 08 */
  "FROM_SUBSTITUTION",
  /* 09 */
  "FROM_CONCRETE_CONSTANTS",
  /* 10 */
  "FROM_CONCRETE_VARIABLES",
  /* 11 */
  "FROM_WITNESS_PREDICATE",
  /* 12 */
  "FROM_LABEL_PREDICATE",
  /* 13 */
  "FROM_LOCAL_OPERATION",

} ;

static const char *const access_authorisation_name_sct[] =
{
  /* 00 */
  "AUTH_DENIED",
  /* 01 */
  "AUTH_READ",
  /* 02 */
  "AUTH_READ_WRITE",
  /* 03 */
  "AUTH_WRITE",
  /* 04 */
  "AUTH_READ_OP",
  /* 05 */
  "AUTH_ALL_OP"
} ;

static const char *const export_access_authorisation_name_sct[] =
{
  /* 00 */
  "access denied",
  /* 01 */
  "read only",
  /* 02 */
  "read and write",
  /* 03 */
  "write only",
  /* 04 */
  "read operations only",
  /* 05 */
  "all operations"
} ;

static const char *const html_access_authorisation_name_sct[] =
{
  /* 00 */
  "",
  /* 01 */
  "<FONT COLOR=\"gray\">AUTH_READ</FONT>",
  /* 02 */
  "<FONT COLOR=\"green\">AUTH_READ_WRITE</FONT>",
  /* 03 */
  "<FONT COLOR=\"blue\">AUTH_WRITE</FONT>",
  /* 04 */
  "<FONT COLOR=\"yellow\">AUTH_READ_OP</FONT>",
  /* 05 */
  "<FONT COLOR=\"black\">AUTH_ALL_OP</FONT>"
} ;

// Noms des enumeres
static const char *const export_access_entity_type_name_sct[] =
{
  /* 00 */
  "formal parameter",
  /* 01 */
  "abstract set",
  /* 02 */
  "enumerated set",
  /* 03 */
  "enumerated value",
  /* 04 */
  "concrete constant",
  /* 05 */
  "abstract_constant",
  /* 06 */
  "concrete_variable",
  /* 07 */
  "abstract_variable",
  /* 08 */
  "unrefined abstract constant from abstraction",
  /* 09 */
  "unrefined abstract variable from abstraction",
  /* 10 */
  "operation",
  /* 11 */
  "local operation",
  /* 12 */
  "in parameter",
  /* 13 */
  "other access",
} ;

static const char *const export_access_entity_location_name_sct[] =
{
  /* 00 */
  "same specification",
  /* 01 */
  "same refinement",
  /* 02 */
  "same implementation",
  /* 03 */
  "refinement abstraction",
  /* 04 */
  "implementation abstraction",
  /* 05 */
  "specification seen by a specification or a refinement",
  /* 06 */
  "specification seen by an implementation",
  /* 07 */
  "included specification",
  /* 08 */
  "imported specification",
  /* 09 */
  "used specification",
  /* 10 */
  "non visible machine",
} ;

static const char *const export_access_from_context_name_sct[] =
{
  /* 00 */
  "CONSTRAINTS clause",
  /* 01 */
  "INCLUDES, EXTENDS or IMPORTS clause",
  /* 02 */
  "PROPERTIES clause",
  /* 03 */
  "VALUES clause",
  /* 04 */
  "VALUES clause (after valuation)",
  /* 05 */
  "INVARIANT or ASSERTIONS clause",
  /* 06 */
  "ASSERT predicate",
  /* 07 */
  "loop VARIANT or INVARIANT",
  /* 08 */
  "substitution",
  /* 09 */
  "CONCRETE_CONSTANTS clause",
  /* 10 */
  "CONCRETE_VARIABLE clause",
  /* 11 */
  "WITNESS predicate",
  /* 12 */
  "LABEL predicate",
  /* 13 */
   "local operations",
  } ;

// Initialisation de la table de visibilite
static int init_visibility_tables_done = FALSE ;
void init_visibility_tables(void)
{
  if (init_visibility_tables_done == TRUE)
	{
	  // Deja fait
	  return ;
	}

  TRACE0("init_visibility_tables") ;
  size_t i, j, k ;

  // Par defaut, l'acces est refuse
  for (i = 0 ; i < (size_t) OTHER_ACCESS ; i++)
	{
	  for (j = 0 ; j <= (size_t) LOC_SPEC_USED ; j++)
		{
		  for (k = 0 ; k <= (size_t) FROM_LOCAL_OPERATION ; k++)
			{
			  visi_tbl_sot[i][j][k] = AUTH_DENIED ;
			}
		}
	}

  // Puis on ajoute les acces :

  // 1) Dans la table LOC_SAME_SPECIFICATION
#undef ACCESS
#define ACCESS(to, from) visi_tbl_sot[to][LOC_SAME_SPECIFICATION][from]
  ACCESS(ACCESS_FORMAL_PARAMETER, FROM_CONSTRAINTS) = AUTH_READ ;
  ACCESS(ACCESS_FORMAL_PARAMETER, FROM_INCL_OR_EXT_OR_IMP) = AUTH_READ ;
  ACCESS(ACCESS_FORMAL_PARAMETER, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_FORMAL_PARAMETER, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_FORMAL_PARAMETER, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_FORMAL_PARAMETER, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_FORMAL_PARAMETER, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_FORMAL_PARAMETER, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_ABSTRACT_SET, FROM_INCL_OR_EXT_OR_IMP) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_ENUMERATED_SET, FROM_INCL_OR_EXT_OR_IMP) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_INCL_OR_EXT_OR_IMP) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_INCL_OR_EXT_OR_IMP) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_ASSERT_PREDICATE) = AUTH_READ_WRITE ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_LABEL_PREDICATE) = AUTH_READ_WRITE ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_VARIANT_OR_INVARIANT) = AUTH_READ_WRITE ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_SUBSTITUTION) = AUTH_READ_WRITE ;

  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_ASSERT_PREDICATE) = AUTH_READ_WRITE ;
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_LABEL_PREDICATE) = AUTH_READ_WRITE ;
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_VARIANT_OR_INVARIANT) = AUTH_READ_WRITE ;
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_SUBSTITUTION) = AUTH_READ_WRITE ;

  ACCESS(ACCESS_IN_PARAMETER, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_IN_PARAMETER, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_IN_PARAMETER, FROM_SUBSTITUTION) = AUTH_READ ;
  ACCESS(ACCESS_IN_PARAMETER, FROM_LOCAL_OPERATION) = AUTH_READ ;

  ACCESS(ACCESS_ANY_QUANTIFIER, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ANY_QUANTIFIER, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ANY_QUANTIFIER, FROM_SUBSTITUTION) = AUTH_READ ;
  ACCESS(ACCESS_ANY_QUANTIFIER, FROM_LOCAL_OPERATION) = AUTH_READ ;

  // 2) Dans la table LOC_SAME_REFINEMENT
#undef ACCESS
#define ACCESS(to, from) visi_tbl_sot[to][LOC_SAME_REFINEMENT][from]
  ACCESS(ACCESS_FORMAL_PARAMETER, FROM_INCL_OR_EXT_OR_IMP) = AUTH_READ ;
  ACCESS(ACCESS_FORMAL_PARAMETER, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_FORMAL_PARAMETER, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_FORMAL_PARAMETER, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_FORMAL_PARAMETER, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_FORMAL_PARAMETER, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_FORMAL_PARAMETER, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_ABSTRACT_SET, FROM_INCL_OR_EXT_OR_IMP) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_ENUMERATED_SET, FROM_INCL_OR_EXT_OR_IMP) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_INCL_OR_EXT_OR_IMP) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_INCL_OR_EXT_OR_IMP) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ_WRITE ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_CONCRETE_VARIABLES) = AUTH_READ_WRITE ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_ASSERT_PREDICATE) = AUTH_READ_WRITE ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_LABEL_PREDICATE) = AUTH_READ_WRITE ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_VARIANT_OR_INVARIANT) = AUTH_READ_WRITE ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_SUBSTITUTION) = AUTH_READ_WRITE ;

  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ_WRITE ;
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_CONCRETE_VARIABLES) = AUTH_READ_WRITE ;
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_ASSERT_PREDICATE) = AUTH_READ_WRITE ;
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_LABEL_PREDICATE) = AUTH_READ_WRITE ;
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_VARIANT_OR_INVARIANT) = AUTH_READ_WRITE ;
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_SUBSTITUTION) = AUTH_READ_WRITE ;

  ACCESS(ACCESS_IN_PARAMETER, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_IN_PARAMETER, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_IN_PARAMETER, FROM_SUBSTITUTION) = AUTH_READ ;
  ACCESS(ACCESS_IN_PARAMETER, FROM_LOCAL_OPERATION) = AUTH_READ ;

  ACCESS(ACCESS_ANY_QUANTIFIER, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ANY_QUANTIFIER, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ANY_QUANTIFIER, FROM_SUBSTITUTION) = AUTH_READ ;
  ACCESS(ACCESS_ANY_QUANTIFIER, FROM_LOCAL_OPERATION) = AUTH_READ ;

  // 3) Dans la table LOC_SAME_IMPLEMENTATION
#undef ACCESS
#define ACCESS(to, from) visi_tbl_sot[to][LOC_SAME_IMPLEMENTATION][from]
  ACCESS(ACCESS_FORMAL_PARAMETER, FROM_INCL_OR_EXT_OR_IMP) = AUTH_READ ;
  ACCESS(ACCESS_FORMAL_PARAMETER, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_FORMAL_PARAMETER, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_FORMAL_PARAMETER, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_FORMAL_PARAMETER, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_FORMAL_PARAMETER, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_FORMAL_PARAMETER, FROM_SUBSTITUTION) = AUTH_READ ;
  ACCESS(ACCESS_FORMAL_PARAMETER, FROM_LOCAL_OPERATION) = AUTH_READ ;

  ACCESS(ACCESS_ABSTRACT_SET, FROM_INCL_OR_EXT_OR_IMP) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_VALUES) = AUTH_WRITE ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_VALUES_AFTER_VALUATION) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_SUBSTITUTION) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_LOCAL_OPERATION) = AUTH_READ ;

  ACCESS(ACCESS_ENUMERATED_SET, FROM_INCL_OR_EXT_OR_IMP) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_VALUES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_SUBSTITUTION) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_LOCAL_OPERATION) = AUTH_READ ;

  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_INCL_OR_EXT_OR_IMP) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_VALUES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_SUBSTITUTION) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_LOCAL_OPERATION) = AUTH_READ ;

  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_INCL_OR_EXT_OR_IMP) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_VALUES) = AUTH_WRITE ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_VALUES_AFTER_VALUATION) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_SUBSTITUTION) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_LOCAL_OPERATION) = AUTH_READ ;

  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_SUBSTITUTION) = AUTH_READ_WRITE ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_LOCAL_OPERATION) = AUTH_READ_WRITE ;

  ACCESS(ACCESS_LOCAL_OPERATION, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_IN_PARAMETER, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_IN_PARAMETER, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_IN_PARAMETER, FROM_SUBSTITUTION) = AUTH_READ ;
  ACCESS(ACCESS_IN_PARAMETER, FROM_LOCAL_OPERATION) = AUTH_READ ;

  ACCESS(ACCESS_ANY_QUANTIFIER, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ANY_QUANTIFIER, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ANY_QUANTIFIER, FROM_SUBSTITUTION) = AUTH_READ ;
  ACCESS(ACCESS_ANY_QUANTIFIER, FROM_LOCAL_OPERATION) = AUTH_READ ;

  // 4) Dans la table LOC_REFINEMENT_ABSTRACTION
#undef ACCESS
#define ACCESS(to, from) visi_tbl_sot[to][LOC_REFINEMENT_ABSTRACTION][from]
  ACCESS(ACCESS_UNREFD_ABSTRACT_CONSTANT_FROM_ABS, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_UNREFD_ABSTRACT_CONSTANT_FROM_ABS, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_UNREFD_ABSTRACT_CONSTANT_FROM_ABS,
		 FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_UNREFD_ABSTRACT_CONSTANT_FROM_ABS,
		 FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_UNREFD_ABSTRACT_CONSTANT_FROM_ABS,
		 FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_UNREFD_ABSTRACT_CONSTANT_FROM_ABS,
                 FROM_LABEL_PREDICATE) = AUTH_READ ;

  ACCESS(ACCESS_UNREFD_ABSTRACT_VARIABLE_FROM_ABS,
		 FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_UNREFD_ABSTRACT_VARIABLE_FROM_ABS,
		 FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_UNREFD_ABSTRACT_VARIABLE_FROM_ABS,
		 FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_UNREFD_ABSTRACT_VARIABLE_FROM_ABS,
                 FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ANY_QUANTIFIER,
         FROM_WITNESS_PREDICATE) = AUTH_READ ;

  // 5) Dans la table LOC_IMPLEMENTATION_ABSTRACTION
#undef ACCESS
#define ACCESS(to, from) visi_tbl_sot[to][LOC_IMPLEMENTATION_ABSTRACTION][from]
  ACCESS(ACCESS_UNREFD_ABSTRACT_CONSTANT_FROM_ABS,
		 FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_UNREFD_ABSTRACT_CONSTANT_FROM_ABS,
		 FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  if (get_disable_scalar_set_constant_valuation_b0_check() == TRUE)
	{
	  ACCESS(ACCESS_UNREFD_ABSTRACT_CONSTANT_FROM_ABS,
			 FROM_VALUES) = AUTH_READ ;
	}
  ACCESS(ACCESS_UNREFD_ABSTRACT_CONSTANT_FROM_ABS,
		 FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_UNREFD_ABSTRACT_CONSTANT_FROM_ABS,
		 FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_UNREFD_ABSTRACT_CONSTANT_FROM_ABS,
		 FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_UNREFD_ABSTRACT_CONSTANT_FROM_ABS,
                 FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_UNREFD_ABSTRACT_CONSTANT_FROM_ABS,
		 FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_UNREFD_ABSTRACT_CONSTANT_FROM_ABS,
		 FROM_LOCAL_OPERATION) = AUTH_READ ;

  ACCESS(ACCESS_UNREFD_ABSTRACT_VARIABLE_FROM_ABS,
		 FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_UNREFD_ABSTRACT_VARIABLE_FROM_ABS,
		 FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_UNREFD_ABSTRACT_VARIABLE_FROM_ABS,
		 FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_UNREFD_ABSTRACT_VARIABLE_FROM_ABS,
                 FROM_LABEL_PREDICATE) = AUTH_READ ;
   ACCESS(ACCESS_UNREFD_ABSTRACT_VARIABLE_FROM_ABS,
		 FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_UNREFD_ABSTRACT_VARIABLE_FROM_ABS,
		 FROM_LOCAL_OPERATION) = AUTH_READ ;

  // 6) Dans la table LOC_SPEC_SEEN_BY_SPEC_OR_REF
#undef ACCESS
#define ACCESS(to, from) visi_tbl_sot[to][LOC_SPEC_SEEN_BY_SPEC_OR_REF][from]
  ACCESS(ACCESS_ABSTRACT_SET, FROM_INCL_OR_EXT_OR_IMP) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_LABEL_PREDICATE) = AUTH_READ ;
    ACCESS(ACCESS_ABSTRACT_SET, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_ENUMERATED_SET, FROM_INCL_OR_EXT_OR_IMP) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_LABEL_PREDICATE) = AUTH_READ ;
 ACCESS(ACCESS_ENUMERATED_SET, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_INCL_OR_EXT_OR_IMP) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_INCL_OR_EXT_OR_IMP) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_OPERATION, FROM_ASSERT_PREDICATE) = AUTH_READ_OP ;
  ACCESS(ACCESS_OPERATION, FROM_LABEL_PREDICATE) = AUTH_READ_OP ;
  ACCESS(ACCESS_OPERATION, FROM_VARIANT_OR_INVARIANT) = AUTH_READ_OP ;
  ACCESS(ACCESS_OPERATION, FROM_SUBSTITUTION) = AUTH_READ_OP ;

  if (get_extended_sees() == TRUE)
	{
	  // Sees etendu, le cas echeant
	  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
	  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
	  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
	  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
	}

  // 7) Dans la table LOC_SPEC_SEEN_BY_IMPLEMENTATION
#undef ACCESS
#define ACCESS(to, from) visi_tbl_sot[to][LOC_SPEC_SEEN_BY_IMPLEMENTATION][from]
  ACCESS(ACCESS_ABSTRACT_SET, FROM_INCL_OR_EXT_OR_IMP) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_VALUES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_SUBSTITUTION) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_LOCAL_OPERATION) = AUTH_READ ;

  ACCESS(ACCESS_ENUMERATED_SET, FROM_INCL_OR_EXT_OR_IMP) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_VALUES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_SUBSTITUTION) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_LOCAL_OPERATION) = AUTH_READ ;

  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_INCL_OR_EXT_OR_IMP) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_VALUES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_SUBSTITUTION) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_LOCAL_OPERATION) = AUTH_READ ;

  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_INCL_OR_EXT_OR_IMP) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_VALUES) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_SUBSTITUTION) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_LOCAL_OPERATION) = AUTH_READ ;

  //GP 18/01/99 Conformement a la table C.9, acces denied
  //ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_INCL_OR_EXT_OR_IMP) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  if (get_disable_scalar_set_constant_valuation_b0_check() == TRUE)
	{
	  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_VALUES) = AUTH_READ ;
	}
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_LOCAL_OPERATION) = AUTH_READ ;

  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_SUBSTITUTION) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_LOCAL_OPERATION) = AUTH_READ ;

  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;

  if (get_extended_sees() == TRUE)
	{
	  // Sees etendu, le cas echeant
	  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
	  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
	  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
	  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
	}
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_LOCAL_OPERATION) = AUTH_READ ;

  ACCESS(ACCESS_OPERATION, FROM_SUBSTITUTION) = AUTH_READ_OP ;
  ACCESS(ACCESS_OPERATION, FROM_LOCAL_OPERATION) = AUTH_READ_OP ;

  // 8) Dans la table LOC_SPEC_INCLUDED_BY_SPEC_OR_REF
#undef ACCESS

#define ACCESS(to, from) visi_tbl_sot[to][LOC_SPEC_INCLUDED][from]

  ACCESS(ACCESS_ABSTRACT_SET, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_ENUMERATED_SET, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
#ifdef EVOL_INCLUDES
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_SUBSTITUTION) = AUTH_READ_WRITE ;
#else // ! EVOL_INCLUDES
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_SUBSTITUTION) = AUTH_READ ;
#endif // EVOL_INCLUDES

  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
#ifdef EVOL_INCLUDES
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_SUBSTITUTION) = AUTH_READ_WRITE ;
#else // ! EVOL_INCLUDES
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_SUBSTITUTION) = AUTH_READ ;
#endif // EVOL_INCLUDES

  ACCESS(ACCESS_OPERATION, FROM_SUBSTITUTION) = AUTH_ALL_OP ;
  ACCESS(ACCESS_OPERATION, FROM_VARIANT_OR_INVARIANT) = AUTH_ALL_OP ;
  ACCESS(ACCESS_OPERATION, FROM_ASSERT_PREDICATE) = AUTH_ALL_OP ;
  ACCESS(ACCESS_OPERATION, FROM_LABEL_PREDICATE) = AUTH_ALL_OP ;

  // 9) Dans la table LOC_SPEC_IMPORTED
#undef ACCESS
#define ACCESS(to, from) visi_tbl_sot[to][LOC_SPEC_IMPORTED][from]
  ACCESS(ACCESS_ABSTRACT_SET, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_VALUES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_SUBSTITUTION) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_LOCAL_OPERATION) = AUTH_READ ;

  ACCESS(ACCESS_ENUMERATED_SET, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_VALUES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_SUBSTITUTION) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_LOCAL_OPERATION) = AUTH_READ ;

  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_VALUES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_SUBSTITUTION) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_LOCAL_OPERATION) = AUTH_READ ;

  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_VALUES) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_SUBSTITUTION) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_LOCAL_OPERATION) = AUTH_READ ;

  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  if (get_disable_scalar_set_constant_valuation_b0_check() == TRUE)
	{
	  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_VALUES) = AUTH_READ ;
	}
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_LOCAL_OPERATION) = AUTH_READ ;

  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
#ifdef EVOL_INCLUDES
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_SUBSTITUTION) = AUTH_READ_WRITE ;
#else // ! EVOL_INCLUDES
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_SUBSTITUTION) = AUTH_READ ;
#endif // EVOL_INCLUDES
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_LOCAL_OPERATION) = AUTH_READ_WRITE ;

  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_LOCAL_OPERATION) = AUTH_READ_WRITE ;

  ACCESS(ACCESS_OPERATION, FROM_SUBSTITUTION) = AUTH_ALL_OP ;
  ACCESS(ACCESS_OPERATION, FROM_LOCAL_OPERATION) = AUTH_ALL_OP ;

  // 10) Dans la table LOC_SPEC_USED
#undef ACCESS
#define ACCESS(to, from) visi_tbl_sot[to][LOC_SPEC_USED][from]
  ACCESS(ACCESS_FORMAL_PARAMETER, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_FORMAL_PARAMETER, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_FORMAL_PARAMETER, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_ABSTRACT_SET, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_SET, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_ENUMERATED_SET, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_SET, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ENUMERATED_VALUE, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_CONSTANT, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_PROPERTIES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_CONCRETE_CONSTANTS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_CONSTANT, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_CONCRETE_VARIABLE, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_INVARIANT_OR_ASSERTIONS) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_CONCRETE_VARIABLES) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_ASSERT_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_LABEL_PREDICATE) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_VARIANT_OR_INVARIANT) = AUTH_READ ;
  ACCESS(ACCESS_ABSTRACT_VARIABLE, FROM_SUBSTITUTION) = AUTH_READ ;

  ACCESS(ACCESS_OPERATION, FROM_ASSERT_PREDICATE) = AUTH_ALL_OP ;
  ACCESS(ACCESS_OPERATION, FROM_LABEL_PREDICATE) = AUTH_ALL_OP ;
  ACCESS(ACCESS_OPERATION, FROM_VARIANT_OR_INVARIANT) = AUTH_ALL_OP ;
  ACCESS(ACCESS_OPERATION, FROM_SUBSTITUTION) = AUTH_ALL_OP ;
}

// Lecture de la table de visibilite
extern T_access_authorisation get_auth(T_access_entity_type type,
												T_access_entity_location location,
												T_access_from_context context)
{
#ifndef NO_CHECKS
  ASSERT( (type >= 0) && (type < OTHER_ACCESS) ) ;
  ASSERT( (location >= 0) && (location <= LOC_SPEC_USED) ) ;
  ASSERT( (context >= 0) && (context <= FROM_LOCAL_OPERATION) ) ;
#endif

  return visi_tbl_sot[type][location][context] ;
}

// Lecture de la table de visibilite
extern
T_access_authorisation get_auth_with_details(T_access_entity_type type,
											 T_access_entity_location location,
											 T_access_from_context context,
											 char **adr_string)
{
  T_access_authorisation auth = get_auth(type, location, context) ;
  // C'est mal de caster un const char * en char *, mais on sait
  // qu'il ne sera que lu alors ...
  *adr_string = (char *)export_access_authorisation_name_sct[auth] ;
  TRACE4("get_auth_with_details(%s, %s, %s -> %s)",
		 access_entity_type_name_sct[type],
		 access_entity_location_name_sct[location],
		 access_from_context_name_sct[context],
		 *adr_string) ;
  return auth ;
}

//
//	}{	Dump des tables au format LaTeX 2e
//
void latex2e_dump_visibility_tables(const char *file_name,
											 const char *output_path)
{
  TRACE2("latex2e_dump_visibility_tables(\"%s\", \"%s\")", file_name, output_path) ;
  init_visibility_tables() ;
  print("Generating LateX2e visibility table \"%s/%s\"\n",
		output_path,
		file_name) ;

  char *path = new char[strlen(file_name) + strlen(output_path) + 2] ;
#ifdef STATS_ALLOC
add_alloc(path,  strlen(file_name) + strlen(output_path) + 2, __FILE__, __LINE__) ;
#endif
  sprintf(path, "%s/%s", output_path, file_name) ;

  FILE *fd = fopen(path, "w") ;

  if (fd == NULL)
	{
	  toplevel_error(FATAL_ERROR,
					 get_error_msg(E_PROBLEM_WRITING_FILE),
					 file_name,
					 strerror(errno)) ;
	}

  s_fprintf(fd, "%% Document generated by bcomp version %s\n", get_bcomp_version()) ;
  s_fprintf(fd, "\\documentclass[a4paper,10pt, landscape]{article}\n") ;
  s_fprintf(fd, "\\usepackage{supertabular}\n") ;
  s_fprintf(fd, "\\usepackage{fancyheadings}\n") ;

  s_fprintf(fd, "\
\\setlength{\\parindent}{0mm}\n\
\\setlength{\\parskip}{3.5pt}\n\
\\setlength{\\textwidth}{26cm}\n\
\\setlength{\\textheight}{16.5cm}\n\
\\setlength{\\oddsidemargin}{-0,5cm}\n\
\\setlength{\\evensidemargin}{-0,5cm}\n\
\\setlength{\\headheight}{1cm}\n\
\\setlength{\\topmargin}{-2cm}\n") ;



  s_fprintf(fd, "\\begin{document}\n") ;
  s_fprintf(fd, "\\lhead{Bcomp version %s\n}", get_bcomp_version()) ;
  s_fprintf(fd, "\\chead{}\n") ;
  s_fprintf(fd, "\\rhead{Visibility tables}\n") ;
  s_fprintf(fd, "\\lfoot{\\copyright 2008 CLEARSY\n}", get_bcomp_version()) ;
  s_fprintf(fd, "\\cfoot{}\n") ;
  s_fprintf(fd, "\\rfoot{\\thepage}\n") ;
  s_fprintf(fd, "\\pagestyle{fancy}\n") ;

  if (get_extended_sees() == TRUE)
	{
	  s_fprintf(fd, "This document shows the visibility tables with the extended sees option.\n") ;
	}
  else
	{
	  s_fprintf(fd, "This document shows the visibility tables without the extended sees option.\n") ;
	}

#ifdef EVOL_INCLUDES
	  s_fprintf(fd, "This document shows the visibility tables with the extended includes semantics.\n") ;
#endif

  s_fprintf(fd,
			"An empty cell, line or column means no access is allowed (\\verb+AUTH_DENIED+)\n") ;

  size_t i, j, k ;

  s_fprintf(fd, "\\scriptsize\n") ;

  // On detaille les tables par endroit de lecture, comme dans
  // le manuel de reference du langage B
  for (i = 0 ; i <= (size_t) LOC_SPEC_USED ; i++)
	{
	  // Pour savoir si on genere les colonnes
	  int columns_si[(size_t)FROM_LOCAL_OPERATION + 1] ;
	  size_t nb_columns = 0 ;

	  for (k = 0 ; k <= (size_t) FROM_LOCAL_OPERATION ; k++)
		{
		  columns_si[k] = FALSE ;
		  for (j = 0 ;
			   ( (j < (size_t)OTHER_ACCESS) && (columns_si[k] == FALSE) ) ;
			   j++)
			{
			  if (get_auth((T_access_entity_type)j,
						   (T_access_entity_location)i,
						   (T_access_from_context)k) != AUTH_DENIED)
				{
				  columns_si[k] = TRUE ;
				  nb_columns ++ ;
				}
			}
		}

	  s_fprintf(fd,
				"\\section{Table %s}\n",
				latex_access_entity_location_name_sct[i]) ;

	  s_fprintf(fd, "\\begin{tabular}{|l|") ;
	  size_t l ;
	  for (l = 0 ; l < nb_columns ; l++)
		{
		  s_fprintf(fd, "p{2.15cm}|") ;
		}
	  s_fprintf(fd, "}\\hline\n") ;

	  // Generation du titre
	  s_fprintf(fd, "Accessed entity / Access location") ;
	  for (k = 0 ; k <= (size_t) FROM_LOCAL_OPERATION ; k++)
		{
		  if (columns_si[k] == TRUE)
			{
			  //
			  // Il faut imprimer le titre
			  // On le coupe automatiquement s'il est trop grand
			  //
			  // Pour savoir si on a coupe
			  const char *title = access_from_context_name_sct[k] ;
			  const char *p = strchr(title, '_') ;
			  if (p != NULL)
				{
				  p = strchr( (char *)((size_t)p + 1), '_') ;
				}
			  if (p != NULL)
				{
				  // Le titre a deux '_', situation a partir de
				  // laquelle un titre de colonne est trop grand. Dans
				  // ce cas, on coupe si possible au deuxieme '_'
				  char *q ;
				  clone (&q, title) ;
				  char *underscore = (char *)((size_t)q + (size_t)p
											  - (size_t)title) ;
				  *underscore = '\0' ;
				  s_fprintf(fd,
							"& \\verb+%s_+ \\verb+%s+",
							q,
							(char *)((size_t)underscore + 1)) ;
				}
			  else
				{
				  s_fprintf(fd, "& \\verb+%s+", title) ;
				}
			}
		}
	  s_fprintf(fd, "\\\\ \\hline") ;

	  for (j = 0 ; j < (size_t) OTHER_ACCESS ; j++)
		{
		  int empty_line = TRUE ;
		  for (k = 0 ;
			   ((k <= (size_t) FROM_LOCAL_OPERATION) && (empty_line == TRUE)) ;
			   k++)
			{
			  if (get_auth((T_access_entity_type)j,
						   (T_access_entity_location)i,
						   (T_access_from_context)k) != AUTH_DENIED)
				{
				  empty_line = FALSE ;
				}
			}

		  if (empty_line == FALSE)
			{
			  s_fprintf(fd,
						"\\verb+%s+ ",
						access_entity_type_name_sct[j]) ;
			  for (k = 0 ; k <= (size_t) FROM_LOCAL_OPERATION ; k++)
				{
				  if (columns_si[k] == TRUE)
					{
					  T_access_authorisation auth =
						get_auth((T_access_entity_type)j,
								 (T_access_entity_location)i,
								 (T_access_from_context)k) ;
					  s_fprintf(fd,
								"& \\verb+%s+ ",
								access_authorisation_name_sct[auth]);
					}
				}
			  s_fprintf(fd, "\\\\ \\hline\n") ;
			}
		}

	  s_fprintf(fd, "\\end{tabular}\n") ;
	}

  s_fprintf(fd, "\\end{document}\n") ;
  fclose(fd) ;
  print("LateX2e visibility table \"%s/%s\" generated\n", output_path, file_name) ;
  print("Generate postcript file with \"dvips -t landscape\"\n") ;
}

//
//	}{	Dump des tables au format HTML
//
void html_dump_visibility_tables(const char *file_name,
										  const char *output_path)
{
  TRACE2("html_dump_visibility_tables(\"%s\", \"%s\")", file_name, output_path) ;
  init_visibility_tables() ;
  print("Generating HTML visibility table \"%s/%s\"\n", output_path, file_name) ;

  char *path = new char[strlen(file_name) + strlen(output_path) + 2] ;
#ifdef STATS_ALLOC
add_alloc(path,  strlen(file_name) + strlen(output_path) + 2, __FILE__, __LINE__) ;
#endif
  sprintf(path, "%s/%s", output_path, file_name) ;

  FILE *fd = fopen(path, "w") ;

  if (fd == NULL)
	{
	  toplevel_error(FATAL_ERROR,
					 get_error_msg(E_PROBLEM_WRITING_FILE),
					 file_name,
					 strerror(errno)) ;
	}

  s_fprintf(fd,
			"<HTML>\n<TITLE>B Compiler version %s - Visibility Table</TITLE>\n",
			get_bcomp_version()) ;

  s_fprintf(fd,
			"<BODY><H4>B Compiler version %s - Visibility Tables</H4>\n",
			get_bcomp_version()) ;

  if (get_extended_sees() == TRUE)
	{
	  s_fprintf(fd, "This document shows the visibility tables with the extended sees option.\n") ;
	}
  else
	{
	  s_fprintf(fd, "This document shows the visibility tables without the extended sees option.\n") ;
	}

#ifdef EVOL_INCLUDES
	  s_fprintf(fd, "This document shows the visibility tables with the extended includes semantics.\n") ;
#endif

  s_fprintf(fd,
			"An empty cell, line or column means no access is allowed (AUTH_DENIED)\n") ;

  size_t i, j, k ;

  // On detaille les tables par endroit de lecture, comme dans
  // le manuel de reference du langage B
  for (i = 0 ; i <= (size_t) LOC_SPEC_USED ; i++)
	{
	  // Pour savoir si on genere les colonnes
	  int columns_si[(size_t)FROM_LOCAL_OPERATION + 1] ;
	  for (k = 0 ; k <= (size_t) FROM_LOCAL_OPERATION ; k++)
		{
		  columns_si[k] = FALSE ;
		  for (j = 0 ;
			   ( (j < (size_t)OTHER_ACCESS) && (columns_si[k] == FALSE) ) ;
			   j++)
			{
			  if (get_auth((T_access_entity_type)j,
						   (T_access_entity_location)i,
						   (T_access_from_context)k) != AUTH_DENIED)
				{
				  columns_si[k] = TRUE ;
				}
			}
		}

	  s_fprintf(fd,
				"<LI><FONT COLOR=\"red\">Table %s</FONT>\n",
				access_entity_location_name_sct[i]) ;
	  s_fprintf(fd, "<TABLE BORDER=4 CELLPADDING=4>\n") ;

	  // Generation du titre
	  s_fprintf(fd, "<TR><TD>Accessed entity | Access location") ;
	  for (k = 0 ; k <= (size_t) FROM_LOCAL_OPERATION ; k++)
		{
		  if (columns_si[k] == TRUE)
			{
			  s_fprintf(fd, "<TD><B>%s</B></TD>", access_from_context_name_sct[k]) ;
			}
		}
	  s_fprintf(fd, "</TR>\n") ;

	  for (j = 0 ; j < (size_t) OTHER_ACCESS ; j++)
		{
		  int empty_line = TRUE ;
		  for (k = 0 ;
			   ((k <= (size_t) FROM_LOCAL_OPERATION) && (empty_line == TRUE)) ;
			   k++)
			{
			  if (get_auth((T_access_entity_type)j,
						   (T_access_entity_location)i,
						   (T_access_from_context)k) != AUTH_DENIED)
				{
				  empty_line = FALSE ;
				}
			}

		  if (empty_line == FALSE)
			{
			  s_fprintf(fd,
						"<TR><TD><B>%s</B></TD>",
						access_entity_type_name_sct[j]) ;
			  for (k = 0 ; k <= (size_t) FROM_LOCAL_OPERATION ; k++)
				{
				  if (columns_si[k] == TRUE)
					{
					  T_access_authorisation auth =
						get_auth((T_access_entity_type)j,
								 (T_access_entity_location)i,
								 (T_access_from_context)k) ;
					  s_fprintf(fd,
								"<TD>%s</TD>",
								html_access_authorisation_name_sct[auth]);
					}
				}
			  s_fprintf(fd, "</TR>\n") ;
			}
		}

	  s_fprintf(fd, "</TABLE></LI>\n</BODY>\n") ;
	}

  s_fprintf(fd, "</HTML>\n") ;
  fclose(fd) ;
  print("HTML visibility table \"%s/%s\" generated\n", output_path, file_name) ;
}

// Obtention du nom d'un T_access_entity_type
const char *get_access_entity_type_name(T_access_entity_type type)
{
#ifdef FULL_TRACE
  TRACE1("get_access_entity_type_name(%d)", (size_t)type) ;
#endif
  ASSERT((size_t)type
		 < (size_t)(sizeof(access_entity_type_name_sct)/sizeof(char *))) ;

#ifdef FULL_TRACE
  TRACE1("get_access_entity_type_name->%s", access_entity_type_name_sct[type]) ;
#endif

  return access_entity_type_name_sct[type] ;
}

// Obtention du nom d'un T_access_from_context
const char *get_access_from_context_name(T_access_from_context ctx)
{
  return access_from_context_name_sct[ctx] ;
}

// Obtention du nom d'un T_access_entity_type
const char *get_access_entity_type_msg(T_access_entity_type type)
{
  return export_access_entity_type_name_sct[type] ;
}

// Obtention du nom d'un T_access_entity_location
const char *
get_access_entity_location_msg(T_access_entity_location location)
{
  return export_access_entity_location_name_sct[location] ;
}

// Obtention du nom d'un T_access_from_context
const char *get_access_from_context_msg(T_access_from_context ctx)
{
  return export_access_from_context_name_sct[ctx] ;
}

// Obtention du nom d'un T_access_authorisation
const char *get_access_authorisation_msg(T_access_authorisation auth)
{
  return export_access_authorisation_name_sct[auth] ;
}



// Calcul de T_access_entity_location a partir des machines
T_access_entity_location make_entity_location(T_machine *from,
													   T_machine *to)
{
  TRACE5("make_entity_location(lecture depuis %x:%s d'un ident de %x:%s.%s)",
		 from,
		 from->get_machine_name()->get_name()->get_value(),
		 to,
		 ((to->get_context() == NULL) ||
		  (to->get_context()->get_instance_name()== NULL))
		 ? "" : to->get_context()->get_instance_name()->get_value(),
		 to->get_machine_name()->get_name()->get_value()) ;

  //ATTENTION : tout modification de la val initiale de res
  //doit etre repercutee plus bas ....
  T_access_entity_location res = LOC_SAME_SPECIFICATION ;
  // Valeur quelconque pour eviter un warning

  if (from == to)
	{
	  // On reste dans la meme machine
	  switch(from->get_machine_type())
		{
		case MTYPE_SPECIFICATION :
		case MTYPE_SYSTEM : //TODO LB A valider
		  {
			res = LOC_SAME_SPECIFICATION ;
			break ;
		  }
		case MTYPE_REFINEMENT :
		  {
			res = LOC_SAME_REFINEMENT ;
			break ;
		  }
		case MTYPE_IMPLEMENTATION :
		  {
			res = LOC_SAME_IMPLEMENTATION ;
			break ;
		  }
		}
	}
  else if (from->get_ref_abstraction() == to)
	{
	  switch(from->get_machine_type())
		{
		case MTYPE_SPECIFICATION :
		case MTYPE_SYSTEM : //TODO LB A valider
		  {
			// Pas possible !!
			assert(FALSE) ; // A FAIRE internal_error
			break ;
		  }
		case MTYPE_REFINEMENT :
		  {
			res = LOC_REFINEMENT_ABSTRACTION ;
			break ;
		  }
		case MTYPE_IMPLEMENTATION :
		  {
			res = LOC_IMPLEMENTATION_ABSTRACTION ;
			break ;
		  }
		}
	}
  else
	{
	  TRACE1("recherche de %x dans SEES INCLUDES IMPORTS USES", from) ;
	  // Reste 4 grandes familles :
	  // from est SEEN, from est INCLUDED, from est IMPORTED, from est USED
	  if (from->get_sees(to) == TRUE)
		{
		  if (from->get_machine_type() == MTYPE_IMPLEMENTATION)
			{
			  res = LOC_SPEC_SEEN_BY_IMPLEMENTATION ;
			}
		  else
			{
			  res = LOC_SPEC_SEEN_BY_SPEC_OR_REF ;
			}
		}
	  else if (from->get_machine_type() != MTYPE_IMPLEMENTATION)
		{
		  if ( 	 (from->get_includes(to) == TRUE)
			   || (from->get_extends(to) == TRUE) )
			{
			  res = LOC_SPEC_INCLUDED ;
			}
		  else if (from->get_uses(to) == TRUE)
			{
			  /* test inutile si ref mais coute rien */
			  res = LOC_SPEC_USED ;
			}
		}
	  else if (	 (from->get_imports(to) == TRUE)
				 || (from->get_extends(to) == TRUE) ) /* MTYPE == IMPLEMENTATION */
		{
		  res = LOC_SPEC_IMPORTED ;
		}
	  else
		{
		  // On ne trouve pas le lien, donc les machines ne sont pas
		  // reliees, donc on accede a une entite non visible
		  TRACE2("erreur : ne peut pas definir le lien entre from %x et to %x",
				 from, to) ;
		  return LOC_NON_VISIBLE ;

#if 0
		  toplevel_error(CAN_CONTINUE,
						 get_error_msg(E_UNABLE_TO_FIND_LINK_BETWEEN_COMPONENTS),
						 from->get_machine_name()->get_name()->get_value(),
						 to->get_machine_name()->get_name()->get_value()) ;
		  return LOC_SPEC_SEEN_BY_IMPLEMENTATION ; // Pour pouvoir continuer
#endif
		}
	}

  TRACE3("make_entity_location(%s -> %s) -> %s",
		 from->get_machine_name()->get_name()->get_value(),
		 to->get_machine_name()->get_name()->get_value(),
		 access_entity_location_name_sct[res]) ;

  return res ;
}



//recherche dans une liste de machines utilisees, la machine
//passee en parametre.
T_access_entity_location find_entity_location_in_used_mch(T_used_machine *from_used_mch,
																   T_machine *to,
																   T_access_entity_location previous_res,
																   T_access_entity_location can_be)
{

  //from_used_mch : liste des machine vues, etendues ou importees
  //to : machine a rechercher
  //can_be vaut LOC_SPEC_IMPORTED
  //            si les machines utilisees sont des machines importees ou etendues.
  //       vaut LOC_SPEC_SEEN_BY_IMPLEMENTATION
  //            si les machines utlisees sont des machines vues.

  T_machine *mch = NULL ;

  T_access_entity_location res = previous_res ;



  //tant qu'il y a des machines utilisees et
  //que res n'a pas ete modifie.....
  while ( (from_used_mch != NULL) && (res == previous_res) )
	{


	  //petite verification d'usage
	  ASSERT( from_used_mch->get_node_type() == NODE_USED_MACHINE ) ;

	  //on recupere la machine associee
	  mch = from_used_mch->get_ref_machine() ;


	  //verification...
	  ASSERT( (mch != NULL) &&
			  (mch->get_node_type() == NODE_MACHINE) ) ;


	  //on recherche alors dans INCLUDES et EXTENDS
	  //pour le cas de SETS, CST et OPERATIONS promues....
	  if ( 	 (mch->get_includes(to) == TRUE) ||
			 (mch->get_extends(to) == TRUE) )
		{
		  //composant vu transitivement par includes ou extends
		  //au niveau de la spec du composant utilise.
		  res = can_be ;

		}
	  else if ( (mch->get_extends() != NULL ) ||
				(mch->get_includes() != NULL ) )
		{

		  //on peut avoir une cascade de extends ou de includes promtes...

		  //il faut chercher dans les spec des machines utilisees...
		  T_used_machine *used_mch = mch->get_extends()  ;

		  if ( used_mch != NULL )
			{
			  //recherche...
			  res =  find_entity_location_in_used_mch(used_mch,
													  to,
													  previous_res,
													  can_be) ;

			}//end if ...

		  used_mch = mch->get_includes() ;

		  if ( used_mch != NULL )
			{
			  //recherche...
			  res =  find_entity_location_in_used_mch(used_mch,
													  to,
													  previous_res,
													  can_be) ;

			}//end if sur used_mch...

		}//end if sur mch



	  //machine vue suivante....
	  from_used_mch = (T_used_machine *)from_used_mch->get_next() ;


	}//end du while....

  return res ;
}
